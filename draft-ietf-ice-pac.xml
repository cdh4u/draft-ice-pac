<?xml version="1.0" encoding="windows-1252"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC0822 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC0822 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8445 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8445.xml">
]>
<?rfc toc="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="yes" ?>
<?rfc sortrefs="no" ?>
<?rfc strict="yes" ?>
<rfc ipr="trust200902" category="std" docName="draft-ietf-ice-pac-latest" obsoletes="" updates="8445" submissionType="IETF" xml:lang="en">
  <front>
    <title abbrev="ICE PAC">
      Interactive Connectivity Establishment Patiently Awaiting Connectivity (ICE PAC)
    </title>
    <author initials="C.H." surname="Holmberg" fullname="Christer Holmberg">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>Hirsalantie 11</street>
          <code>02420</code>
          <city>Jorvas</city>
          <country>Finland</country>
        </postal>
        <email>christer.holmberg@ericsson.com</email>
      </address>
    </author>
    <author initials="J." surname="Uberti" fullname="Justin Uberti">
      <organization>Google</organization>
      <address>
        <postal>
          <street>747 6th St W</street>
          <code>98033</code>
          <city>Kirkland</city>
          <country>USA</country>
        </postal>
        <email>justin@uberti.name</email>
      </address>
    </author>

    <date year="2019"/>
    <area>Transport</area>
    <workgroup>ICE Working Group</workgroup>
    <keyword>ICE</keyword>
    <keyword>PAC</keyword>
    <keyword>Candidate</keyword>
    <abstract>
      <t>
        During the process of creating a peer-to-peer connection,
        ICE agents can encounter situations where they have
        no candidate pairs to check, and, as a result, conclude that
        ICE processing has failed. However, because additional
        candidate pairs can be discovered during ICE processing,
        declaring failure at this point may be premature. This
        document discusses when these situations can occur and
        proposes a way to avoid premature failure.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction" toc="default">
      <t>
        <xref target="RFC8445"></xref> describes a protocol, Interactive Connectivity Establishment (ICE),
        for Network Address Translator (NAT) traversal for UDP-based communication.
      </t>
      <t>
        When using ICE, endpoints will exchange candidiates, form one or more
        lists (checklists) of candidate pairs, and then test the pairs to
        determine whether connectivity can be established. There is a checklist
        for each data stream associated with the session. If connectivity for
        a data stream cannot be established, the state of the checklist associated
        with the data stream is set to Failed. Once the state of all checklists
        have been set to Failed, the ICE agent sets the state of the ICE session
        to Failed. Based on local policy, the ICE agent can also set the state of 
        the ICE session to Failed even if the state of only some of the checklists
        have been set to Failed.
      </t>
      <t>
        While candidate pairs are tested, additional candidates, referred to as
        peer-reflexive candidates, might be created as a result of successful
        inbound ICE connectitivy checks received from the remote peer. Such
        candidates will be used to form new candidate pairs that will be tested
        like any other candidate pair.
      </t>
      <t>
        However, there is an inherent race condition here; if, before learning about 
        any peer-reflexive candidates, an endpoint runs out of candidate pairs to check, 
        either because it has none, or it considers them all to have failed, the agent might 
        prematurely declare ICE failure and terminate the ICE processing. This race condition
        can occur in many common situations.
      </t>
      <t>
        This specification updates <xref target="RFC8445"></xref>, by defining
        a minimum duration for the ICE processing, and a new timer, Tpac. The tiemout
        value of timer Tpac will be equal to the minimum duration for the ICE processing.
        An ICE agent will not declare ICE failure while timer Tpac is still running.
        This will provide extra time for the discovery of peer-reflexive candidates, 
        that might eventually lead to ICE processing completing successfully.
      </t>
    </section>

    <section title="Conventions">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"></xref> <xref target="RFC8174"></xref>
        when, and only when, they appear in all capitals, as shown here.
      </t>
    </section>

    <section title="Relevant Scenarios">
        <t>
          As noted above, the core problem this specification attempts to
          address is the situation where even after local gathering and remote
          candidate signaling has completed, the ICE agent immediately ends up
          with no valid pairs and no candidate pairs left to check, resulting in
          a premature ICE failure. This failure is premature because not
          enough time has elapsed to allow for discovery of peer-reflexive
          candidates from inbound connectivity checks; if discovered, these
          candidates are very likely to result in a valid pair.
        </t>
        <t>
          In most ICE scenarios, the lengthy timeouts for connectivity check transactions,
          typically tens of seconds, will prevent this problem from occurring. However, there
          are certain specific cases where this problem will frequently occur.
        </t>
        <section title="No Candidates From Peer">
          <t>
            It is entirely legal for an ICE agent to provide zero candidates of
            its own. If the agent somehow knows that the remote endpoint is
            directly reachable, gathering local candidates is unnecessary and
            will only cause delays; the peer agent can discover the
            appropriate local candidate via connectivity checks.
          </t>
          <t>
            However, following the procedures from
            <xref target="RFC8445"></xref> strictly will result in immediate
            ICE failure, since the checklist at the peer agent will be
            empty.
          </t>
        </section>
        <section title="All Candidates Discarded">
          <t>
            Even if the ICE agent provides candidates, they may be discarded
            by the peer agent if it does not know what to do with them.
            For example, candidates may use an address family that the peer
            agent does not support, (e.g., a host candidate with an IPv6
            address in a NAT64 scenario), or may not be usable for some other
            reason (e.g., a candidate that contains a FQDN that fails to
            resolve).
          </t>
          <t>
            In these scenarios, when the candidates are discarded, the
            checklist at the peer agent will once again be empty, leading
            to immediate ICE failure.
          </t>
        </section>
        <section title="Immediate Candidate Pair Failure">
          <t>
            Section 7.2.5.2 of <xref target="RFC8445"></xref> describes several
            situations in which a candidate pair will be considered to have
            failed, well before the connectivity check transaction timeout.
          </t>
          <t>
            As a result, even if the ICE agent provides usable candidates,
            the pairs created by the peer agent may fail immediately when
            checked, e.g., a check to a non-routable address that receives an
            immediate ICMP error.
          </t>
          <t>
            In this situation, the checklist at the peer agent may contain
            only failed pairs, resulting in immediate ICE failure.
          </t>
        </section>
    </section>

    <section title="Update to RFC 8445">
      <t>
        In order to avoid the problem described in this specification, this
        section updates <xref target="RFC8445" />. It defines a new timer, Tpac,
        and defines new procedures associated with the timer for full ICE implementations.
      </t>
      <t>
        A full ICE implementation starts timer Tpac once it has received the set of remote candidates from
        the remote peer and has sent back its set of local candidates, as described in Section 5 of <xref target="RFC8445" 
        pageno="false" format="default"/>.
      </t>
      <t>
        The timeout value of timer Tpac SHOULD be set to the timeout value of an ICE connectivity
        check transaction associated with the ICE session.
        This timeout value is chosen to roughly coincide with the maximum
        possible duration of ICE connectivity checks from the remote peer,
        which, if successful, could create peer-reflexive candidates. Because
        the ICE agent does not know the exact number of candidate pairs and pacing
        interval in use by the peer, this timeout value is simply a
        guess, albeit an educated one.
      </t>
      <t>
        While timer Tpac is running, the ICE agent MUST NOT set the state of a
        checklist to Failed, even if there are no more candidate pairs to check
        in the checklist. As a result, the ICE agent will not remove data streams,
        or set the state of the ICE session to Failed, while timer Tpac is still running.
      </t>
      <t>
        While timer Tpac is running, if the ICE agent has set the state of each checklist
        to Completed, the ICE agent can terminate the timer and set the state of the ICE session
        to Completed, following normal ICE procedures.
      </t>
      <t>
        If timer Tpac times out while the state of at least one checklist is
        Running, the ICE agent MUST continue the ICE processing, and will later 
        conclude the ICE processing and set the state of the ICE session to either Completed
        or Failed, follwoing normal ICE procedurs.
      </t>
    </section>

    <section anchor="section.sec" title="Security Considerations">
      <t>
        The security considerations for ICE are defined in <xref target="RFC8445" pageno="false" format="default"/>.
        This specification only recommends that ICE agents wait for a certain time of period before they declare
        ICE failure, and does not introduce new security considerations.
      </t>
    </section>

    <section anchor="section.iana" title="IANA considerations">
      <t>
        This specification makes no requests to IANA.
      </t>
    </section>

    <section anchor="sec-acks" title="Acknowledgements" toc="default">
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.8174"?>
      <?rfc include="reference.RFC.8445"?>
    </references>
  </back>
</rfc>
